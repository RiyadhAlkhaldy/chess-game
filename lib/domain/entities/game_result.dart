// lib/domain/entities/game_result.dart
import 'package:freezed_annotation/freezed_annotation.dart';

import 'piece.dart'; // For PieceColor

part 'game_result.freezed.dart'; // Generated by freezed

/// Enum representing the possible outcomes of a chess game.
/// تمثيل النتائج المحتملة للعبة الشطرنج
/// Game Outecome = نتيجة اللعبة
/// draw = تعادل , stalemate = طريق مسجود , playing , chechmate
enum GameOutcome { checkmate, stalemate, draw, playing }

/// Enum representing the reasons for a draw
/// Enum يمثل أسباب التعادل.
/// insufficientMaterial = مادة غير كافية, fiftyMoveRule =قاعدة الخمسين حركة,
///  threefoldRepetition = التكرار الثلاثي, agreement = اتفاق
enum DrawReason { insufficientMaterial, fiftyMoveRule, threefoldRepetition, agreement }

/// Represents the current result or state of a chess game.
/// يمثل النتيجة الحالية أو حالة الشطرنج
@freezed
abstract class GameResult with _$GameResult {
  const factory GameResult({
    required GameOutcome outcome, // The outcome of the game
    PieceColor? winner,           // The color of the winning player (if checkmate)
    DrawReason? drawReason,       // The reason for a draw (if draw)
  }) = _GameResult;

  /// Factory constructor for a game that is currently playing.
  factory GameResult.playing() => const GameResult(outcome: GameOutcome.playing);

  /// Factory constructor for a checkmate outcome.
  factory GameResult.checkmate(PieceColor winner) => GameResult(outcome: GameOutcome.checkmate, winner: winner);

  /// Factory constructor for a stalemate outcome.
  factory GameResult.stalemate() => const GameResult(outcome: GameOutcome.stalemate);

  /// Factory constructor for a draw outcome with a specific reason.
  factory GameResult.draw(DrawReason reason) => GameResult(outcome: GameOutcome.draw, drawReason: reason);
}