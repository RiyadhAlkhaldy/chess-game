// lib/domain/entities/move.dart
import 'package:freezed_annotation/freezed_annotation.dart';

import 'cell.dart';
import 'piece.dart'; // Needed for PieceType in promotion

part 'move.freezed.dart'; // Generated by freezed
part 'move.g.dart'; // Generated by freezed

/// Represents a single move in the chess game.
@freezed
abstract class Move with _$Move {
  const factory Move({
    required Cell start, // Starting cell of the piece
    required Cell end, // Ending cell of the piece
    @Default(false) bool isCapture, // True if this move is a capture
    @Default(false) bool isCastling, // True if this move is castling
    @Default(false)
    bool isEnPassant, // True if this move is an en passant capture
    @Default(false) bool isPromotion, // True if this move is a pawn promotion
    PieceType?
    promotedPieceType, // The type of piece the pawn promotes to (if isPromotion is true)
    @Default(false)
    bool
    isTwoStepPawnMove, // True if a pawn moved two squares (for en passant tracking)
    required Piece movedPiece,
    Piece? capturedPiece,
    Piece? promotedTo,
    Cell? enPassantTargetBefore,
    bool? wasFirstMoveKing,
    bool? wasFirstMoveRook,
    int? halfMoveClockBefore,
    int? fullMoveNumberBefore,
    Cell? castlingRookFrom,
    Cell? castlingRookTo,
  }) = _Move;

  factory Move.fromJson(Map<String, dynamic> json) => _$MoveFromJson(json);
}
