// دالة main لتجربة الكود
import 'package:chess_gemini_2/domain/entities/board.dart';
import 'package:chess_gemini_2/domain/entities/cell.dart';
import 'package:chess_gemini_2/domain/entities/piece.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter_test/flutter_test.dart';

void main() {
  group('Board', () {
    
    test('  fenToBoard', () {
      // سلسلة FEN التي تريد اختبارها
      final String testFen =
          'rnbqk2r/pp3ppp/2p2n2/3p2B1/1b1P4/2N2N2/PP2PPPP/R2QKB1R w KQkq - 0 1';

      // استدعاء الدالة fenToBoard مع سلسلة FEN
      final Board board = Board.fenToBoard(testFen);

      // طباعة بعض خصائص اللوحة للتحقق من صحتها
      debugPrint('FEN string used: $testFen');
      debugPrint(
        'Current Player: ${board.currentPlayer == PieceColor.white ? 'White' : 'Black'}',
      );
      debugPrint('Castling Rights: ${board.castlingRights}');

      // طباعة قطعة معينة للتأكد من وضعها بشكل صحيح
      // فيل أبيض في G5 (الصف 3، العمود 6)
      final bishopCell = Cell(row: 3, col: 6);
      final pieceAtG5 = board.getPieceAt(bishopCell);

      if (pieceAtG5 != null) {
        debugPrint(
          'Piece at G5: ${pieceAtG5.color == PieceColor.white ? 'White' : 'Black'} ${pieceAtG5.type}',
        );
      } else {
        debugPrint('No piece found at G5.');
      }

      // تحقق من أن الوضعية ليست الوضعية الافتتاحية
      final initialFen =
          'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';
      final currentBoardFen =
          board.toFenString(); // دالة toFenString موجودة في الكود المرفوع

      debugPrint('FEN generated by the board: $currentBoardFen');
      debugPrint('Is this the initial FEN? ${currentBoardFen == initialFen}');
    });
  });
}

// هنا يمكنك وضع دالة fenToBoard نفسها
// Note: This code assumes the existence of the `fenToBoard` and `toFenString` functions
// and all the required entities (Board, Piece, etc.).
